/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package VIEW.userViews;

import Atxy2k.CustomTextField.RestrictedTextField;
import CONTROLER.UserControler;
import MODEL.UserModel;
import VIEW.mainFrame.MainFrame;
import static java.lang.Integer.parseInt;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Rafael
 */
public class DeleteUpdateUser extends javax.swing.JInternalFrame {

    /**
     * Creates new form DeleteUser
     */
    public DeleteUpdateUser() {
        initComponents();

        RestrictedTextField validarName = new RestrictedTextField(txtName);
        validarName.setOnlyText(true);
        validarName.setAcceptSpace(true);
        validarName.setLimit(40);

        RestrictedTextField validarUser = new RestrictedTextField(txtUser);
        validarUser.setOnlyAlphaNumeric(isSelected);
        validarUser.setLimit(20);

        RestrictedTextField validarPass = new RestrictedTextField(txtPassword);
        validarPass.setOnlyAlphaNumeric(isSelected);
        validarPass.setLimit(8);

        RestrictedTextField validarAutPass = new RestrictedTextField(txtAutPassword);
        validarAutPass.setOnlyAlphaNumeric(isSelected);
        validarAutPass.setLimit(5);

        // DefaultTableModel model = (DefaultTableModel) tblSearch.getModel();
        // tblSearch.setRowSorter(new TableRowSorter(model));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnDeleteUser = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtNameSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSearch = new javax.swing.JTable();
        txtName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtUser = new javax.swing.JTextField();
        txtId = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btnRefresh = new javax.swing.JButton();
        btnUpdateUser = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtPassword = new javax.swing.JTextField();
        txtAutPassword = new javax.swing.JTextField();
        cmbPerfil = new javax.swing.JComboBox<>();
        btnSaveUpdate = new javax.swing.JButton();
        btnClearFields = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("deletar usuario");
        setPreferredSize(new java.awt.Dimension(1100, 720));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        btnDeleteUser.setText("DELETE");
        btnDeleteUser.setEnabled(false);
        btnDeleteUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteUserActionPerformed(evt);
            }
        });

        jLabel1.setText("User name:");

        txtNameSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameSearchActionPerformed(evt);
            }
        });
        txtNameSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNameSearchKeyReleased(evt);
            }
        });

        tblSearch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblSearch.setFocusable(false);
        tblSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSearchMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblSearch);

        txtName.setEnabled(false);

        jLabel2.setText("Name");

        jLabel3.setText("id");

        jLabel4.setText("User");

        txtUser.setEnabled(false);
        txtUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserActionPerformed(evt);
            }
        });

        txtId.setEnabled(false);
        txtId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdActionPerformed(evt);
            }
        });

        jLabel5.setText("SELECTED USER ");

        btnRefresh.setText("REFRESH");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnUpdateUser.setText("UPDATE");
        btnUpdateUser.setEnabled(false);
        btnUpdateUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateUserActionPerformed(evt);
            }
        });

        jLabel6.setText("Password");

        jLabel7.setText("Aut Password");

        jLabel8.setText("Perfil");

        txtPassword.setEnabled(false);

        txtAutPassword.setEnabled(false);

        cmbPerfil.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "User", "Admin" }));
        cmbPerfil.setEnabled(false);
        cmbPerfil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPerfilActionPerformed(evt);
            }
        });

        btnSaveUpdate.setText("SAVE UPDATE");
        btnSaveUpdate.setEnabled(false);
        btnSaveUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveUpdateActionPerformed(evt);
            }
        });

        btnClearFields.setText("CLEAR FIELDS");
        btnClearFields.setEnabled(false);
        btnClearFields.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearFieldsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(119, 119, 119)
                                .addComponent(btnRefresh))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 732, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel6))
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtName)
                                    .addComponent(txtUser)
                                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 479, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtAutPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbPerfil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(309, 309, 309)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(313, 313, 313)
                        .addComponent(btnDeleteUser)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdateUser)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSaveUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnClearFields)))
                .addContainerGap(310, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRefresh))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtAutPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(cmbPerfil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeleteUser)
                    .addComponent(btnUpdateUser)
                    .addComponent(btnSaveUpdate)
                    .addComponent(btnClearFields))
                .addContainerGap(184, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNameSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameSearchActionPerformed

    }//GEN-LAST:event_txtNameSearchActionPerformed

    private void btnDeleteUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteUserActionPerformed
        try {
            if (autorizationUser().next()) {

                JOptionPane.showMessageDialog(null, "Verified", "Authorized user", 1);
                delete();
            } else {
                JOptionPane.showMessageDialog(null, "Wrong pin", "User not authorized", 0);
            }

        } catch (SQLException ex) {
            Logger.getLogger(DeleteUpdateUser.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnDeleteUserActionPerformed

    private void txtNameSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNameSearchKeyReleased
        search();
    }//GEN-LAST:event_txtNameSearchKeyReleased

    private void tblSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSearchMouseClicked
        setFields();
        txtAutPassword.setEditable(false);
        if (!txtName.getText().isEmpty()) {
            btnDeleteUser.setEnabled(true);
            btnUpdateUser.setEnabled(true);
            btnClearFields.setEnabled(true);
        }
    }//GEN-LAST:event_tblSearchMouseClicked

    private void txtUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUserActionPerformed

    private void txtIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        read();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnUpdateUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateUserActionPerformed

        btnDeleteUser.setEnabled(false);
        btnUpdateUser.setEnabled(false);
        btnSaveUpdate.setEnabled(true);
        txtId.setEditable(false);
        txtId.setEnabled(true);
        enableTxtFields();
        tblSearch.setEnabled(false);

    }//GEN-LAST:event_btnUpdateUserActionPerformed

    private void cmbPerfilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPerfilActionPerformed

        String a = cmbPerfil.getSelectedItem().toString();

        if (a.equals("Admin")) {
            txtAutPassword.setEnabled(true);
            txtAutPassword.setEditable(true);
        } else {
            txtAutPassword.setText(null);
            txtAutPassword.setEnabled(false);

        }

    }//GEN-LAST:event_cmbPerfilActionPerformed

    private void btnClearFieldsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearFieldsActionPerformed
        clearFields();
        disableButtons();
        disableTxtFields();
        tblSearch.setEnabled(true);


    }//GEN-LAST:event_btnClearFieldsActionPerformed

    private void btnSaveUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveUpdateActionPerformed
        //update();
        try {
            if (autorizationUser().next()) {

                JOptionPane.showMessageDialog(null, "Verified", "Authorized user", 1);
                if (update() == 1) {
                    clearFields();
                    disableButtons();
                    disableTxtFields();
                    tblSearch.setEnabled(true);
                    read();
                } else {
                    read();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Wrong pin", "User not authorized", 0);
            }

        } catch (SQLException ex) {
            Logger.getLogger(DeleteUpdateUser.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnSaveUpdateActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        search();
    }//GEN-LAST:event_formInternalFrameOpened


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearFields;
    private javax.swing.JButton btnDeleteUser;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSaveUpdate;
    private javax.swing.JButton btnUpdateUser;
    private javax.swing.JComboBox<String> cmbPerfil;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblSearch;
    private javax.swing.JTextField txtAutPassword;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtNameSearch;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables

    private void search() {

        try {
            String name = txtNameSearch.getText();
            UserModel usermodel = new UserModel();
            usermodel.setName(name);

            UserControler userCont = new UserControler(usermodel);
            userCont.search(usermodel);

            tblSearch.setModel(DbUtils.resultSetToTableModel(userCont.rs));

        } catch (SQLException ex) {
            Logger.getLogger(SearchUser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void delete() {

        int i = JOptionPane.showConfirmDialog(null, "Do you really want to delete the user (" + txtName.getText() + ")?", "Warning", JOptionPane.OK_CANCEL_OPTION, 2);

        if (i == JOptionPane.OK_OPTION) {
            int id = Integer.parseInt(txtId.getText());

            UserModel usermodel = new UserModel();
            usermodel.setId(id);

            UserControler usercontroler = new UserControler(usermodel);
            usercontroler.delete(usermodel);
            clearFields();
            disableButtons();

            read();
        } else {
            //clearFields();
            // btnDeleteUser.setEnabled(false);
            btnUpdateUser.setEnabled(false);
        }
    }

    private void read() {

        try {
            UserControler userCont = new UserControler();
            UserModel userModel = new UserModel();

            DefaultTableModel model = (DefaultTableModel) tblSearch.getModel();
            model.setNumRows(0);

            ArrayList<UserModel> list = userCont.read();

            for (int i = 0; i < list.size(); i++) {
                model.addRow(new Object[]{
                    list.get(i).getId(),
                    list.get(i).getName(),
                    list.get(i).getUser(),
                    list.get(i).getPassword(),
                    list.get(i).getAutPassword(),
                    list.get(i).getPerfil()
                });
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "tela principal" + e);
        }
    }

    private int update() {
        int id = parseInt(txtId.getText());
        String name = txtName.getText();
        String user = txtUser.getText();
        String password = txtPassword.getText();
        String autPassword = txtAutPassword.getText();
        String perfil = cmbPerfil.getSelectedItem().toString();
        int execute = 0;

        switch (perfil) {
            case "Admin":
                if (name.isEmpty() || user.isEmpty() || password.isEmpty() || autPassword.isEmpty()) {

                    JOptionPane.showMessageDialog(null, "ALL FIELDS MUST BE FILLED IN");

                } else if (password.length() < 8 || autPassword.length() < 5) {
                    JOptionPane.showMessageDialog(null, "AS SENHAS DEVEM CONTER O TAMANHO ESPECIFICADO");
                } else {
                    UserModel usermodel = new UserModel();
                    usermodel.setName(name);
                    usermodel.setUser(user);
                    usermodel.setPassword(password);
                    usermodel.setAutPassword(autPassword);
                    usermodel.setPerfil(perfil);

                    UserControler userCont = new UserControler(usermodel);
                    userCont.update(usermodel);
                    execute = 1;
                }

            case "User":
                if (name.isEmpty() || user.isEmpty() || password.isEmpty()) {

                    JOptionPane.showMessageDialog(null, "ALL FIELDS MUST BE FILLED IN");

                } else if (password.length() < 8) {
                    JOptionPane.showMessageDialog(null, "AS SENHAS DEVEM CONTER O TAMANHO ESPECIFICADO");
                } else {
                    UserModel usermodel = new UserModel();
                    usermodel.setId(id);
                    usermodel.setName(name);
                    usermodel.setUser(user);
                    usermodel.setPassword(password);
                    usermodel.setAutPassword(autPassword);
                    usermodel.setPerfil(perfil);

                    UserControler userCont = new UserControler(usermodel);
                    userCont.update(usermodel);
                    execute = 1;
                }
        }
        return execute;
    }

    private ResultSet autorizationUser() {

        String autPassword = JOptionPane.showInputDialog(null, "Insert your autorization pin", "Acess verification", 3);
        String user = MainFrame.lblUserName.getText();

        UserModel usermodel = new UserModel();
        usermodel.setUser(user);
        usermodel.setAutPassword(autPassword);
        UserControler userCont = new UserControler(usermodel);
        ResultSet rs = userCont.autorizationUser(usermodel);
        return rs;
    }

    private void setFields() {
        int set = tblSearch.getSelectedRow();
        txtId.setText(tblSearch.getModel().getValueAt(set, 0).toString());
        txtName.setText(tblSearch.getModel().getValueAt(set, 1).toString());
        txtUser.setText(tblSearch.getModel().getValueAt(set, 2).toString());
        txtPassword.setText(tblSearch.getModel().getValueAt(set, 3).toString());
        txtAutPassword.setText(tblSearch.getModel().getValueAt(set, 4).toString());
        cmbPerfil.setSelectedItem(tblSearch.getModel().getValueAt(set, 5).toString());
    }

    private void clearFields() {

        txtId.setText(null);
        txtName.setText(null);
        txtUser.setText(null);
        txtNameSearch.setText(null);
        txtPassword.setText(null);
        txtAutPassword.setText(null);
        cmbPerfil.setSelectedItem(0);
    }

    private void disableButtons() {
        btnDeleteUser.setEnabled(false);
        btnSaveUpdate.setEnabled(false);
        btnUpdateUser.setEnabled(false);
        btnClearFields.setEnabled(false);
    }

    private void disableTxtFields() {
        txtId.setEnabled(false);
        txtName.setEnabled(false);
        txtUser.setEnabled(false);
        txtPassword.setEnabled(false);
        txtAutPassword.setEnabled(false);
        cmbPerfil.setEnabled(false);
    }

    private void enableTxtFields() {
        txtName.setEnabled(true);
        txtUser.setEnabled(true);
        txtPassword.setEnabled(true);
        txtAutPassword.setEnabled(true);
        cmbPerfil.setEnabled(true);

    }
}
